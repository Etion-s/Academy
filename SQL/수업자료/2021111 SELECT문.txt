<< SELECT 문으로 특정 데이터를 추출하기 >>
SELECT [DISTINCT] {*, column[Alias], ...}
FROM 테이블명;

1. 테이블의 모든 데이터 출력
SELECT *
FROM 테이블명;
ex> EMP 테이블의 모든 내용 출력
SELECT *
FROM EMP;

2. 칼럼 이름을 명시해서 특정 칼럼만 보기
SELECT 칼럼 이름, ...
FROM 테이블명;
ex> DEPT 테이블에서 부서번호와 부서명만 출력
SELECT DEPTNO, DNAME
FROM DEPT;
ex> 사원의 이름과 급여와 입사일자만을 출력하는 SQL
SELECT ENAME, SAL, HIREDATE
FROM EMP;

3. 칼럼 이름에 별칭 지정하기
칼럼을 기술한 바로 뒤에 AS 키워드를 사용후 별칭 기술
SELECT 칼럼 이름 AS "별칭" | 별칭
FROM 테이블명;
-> "를 생략해도 된다. 
-> "를 사용해야하는 경우는 공백문자나 $, _, # 등 특수문자를 사용하거나
-> 대소문자를 구별하고 싶을 경우
-> 별칭으로 한글 사용이 가능하다.
ex> DEPT 테이블의 부서번호와 부서명을 별칭을 지정해서 출력
SELECT DEPTNO AS DepartmentNo,
   	      DNAME AS DepartmentName
FROM DEPT;
ex> DEPT 테이블의 부서번호와 부서명을 별칭을 지정해서 출력 "" 사용
SELECT DEPTNO AS "Department No",
		  DNAME AS "Department Name"
FROM DEPT;
ex> DEPT 테이블의 부서번호와 부서명을 한글별칭으로 지정해서 출력
SELECT DEPTNO AS "부서번호",
		  DNAME AS "부서명"
FROM DEPT;

4. 중복된 데이터를 한번씩만 출력하게 하는 DISTINCT
ex> EMP 테이블에서 칼럼 JOB을 표시하되 중복된 값은 한번만 표시하라.
SELECT DISTINCT JOB
FROM EMP;
ex> 사원들이 어떤 부서에 소속되어 있는지 소속 부서번호를 출력하되 중복되지 않고 한번씩 출력
SELECT DISTINCT DEPTNO
FROM EMP;

5. WHERE 조건과 비교 연산자
SELECT [DISTINCT] {*, column[Alias], ...}
FROM 테이블명
WHERE 조건식;
ex> 전체 사원의 사원번호, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL
FROM EMP;
ex> 급여를 3000 이상 받는 사원의 사원번호, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL>=3000;

< SQL의 비교연산자 >
=				같다
>				보다 크다
<				보다 작다
>=			보다 크거나 같다
<= 			보다 작거나 같다
<>, !=, ^=	같지 않다

ex> 급여를 3000 미만 받는 사원의 사원번호, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL<3000;
ex> 테이블 EMP 중에서 부서 번호가 10번인 사원에 관한 모든 정보만 출력
SELECT *
FROM EMP
WHERE DEPTNO=10;
ex> 테이블 EMP 중에서 급여가 2000 미만이 되는 사원의 정보 중에서 사번과 이름, 급여를 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL<2000;

6. 문자 데이터 조회
문자 데이터는 반드시 단일 따옴표 ' 안에 표시  		-> " 사용하면 에러 발생
대소문자를 구별한다.
ex> 이름(ENAME)이 'SCOTT'인 사원
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE ENAME='SCOTT';
ex> 이름이 MILLER인 사람의 사원번호와 사원명과 직급을 출력
SELECT EMPNO, ENAME, JOB
FROM EMP
WHERE ENAME='MILLER';

7. 날짜 데이터 조회
반드시 단일 따옴표 안에 표시. 년/월/일 형식으로 기술
년도의 4자리 중 앞 두자리 19는 생략 가능
ex> 1983년 이후에 입사한 사원
SELECT ENAME, HIREDATE
FROM EMP
WHERE HIREDATE>='85/01/01';
ex> 1982년 이전에 입사한 사원
SELECT ENAME, HIREDATE
FROM EMP
WHERE HIREDATE<'1982/01/01';

8. 논리연산자
# AND 연산자
여러 조건을 모두 만족해야 할 경우 AND 연산자를 사용
ex> 부서번호가 10번이고 직급이 MANAGER인 사원
SELECT ENAME, DEPTNO, JOB
FROM EMP
WHERE DEPTNO=10 AND JOB='MANAGER';
ex> 급여가 1000에서 3000 사이에 있는 사원
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL>=1000 AND SAL<=3000;

# OR 연산자
두 가지 조건 중에서 한 가지만 만족하더라도 검색할 수 있도록 할 경우 OR 연산자를 사용
ex> 부서번호가 10번이거나 직급이 MANAGER인 사원
SELECT ENAME, DEPTNO, JOB
FROM EMP
WHERE DEPTNO=10 OR JOB='MANAGER';
ex> 사원번호가 7844이거나 7654이거나 7521인 사원
SELECT EMPNO, ENAME
FROM EMP
WHERE EMPNO=7844 OR EMPNO=7654 OR EMPNO=7521;
SELECT EMPNO, ENAME
FROM EMP
WHERE EMPNO IN (7844, 7654, 7521);

# NOT 연산자
반대되는 논리값을 구한다.
ex> 부서번호가 10번이 아닌 사원
SELECT ENAME, DEPTNO
FROM EMP
WHERE NOT DEPTNO=10;
ex> 직급이 MANAGER가 아닌 사원
SELECT ENAME, JOB
FROM EMP
WHERE NOT JOB='MANAGER';

# BETWEEN AND 연산자
특정 범위 내에 속하는 데이터를 알아보려고 할 때 사용
WHERE 컬럼명 BETWEEN A AND B				(A가 B보다 작아야한다)
ex> 급여가 1000에서 3000 사이에 있는 사원
SELECT ENAME, SAL
FROM EMP
WHERE SAL BETWEEN 1000 AND 3000;
ex> 급여가 1500과 2500사이인 사원의 사번, 이름, 급여를 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL BETWEEN 1500 AND 2500;

# IN 연산자
동일한 칼럼이 여러개의 값 중 하나인지 살펴보기 위해서 묶어서 사용
WHERE 컬럼명 IN (A, B, C)
ex> 사원번호가 7844이거나 7654이거나 7521인 사원
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE EMPNO IN (7844, 7654, 7521);
ex> 커미션이 300이거나 500이거나 1400 중의 하나인 사원의 이름, 급여, 커미션을 출력
SELECT ENAME, SAL, COMM
FROM EMP
WHERE COMM IN (300, 500, 1400);

9. LIKE 연산자
검색하고자 하는 값을 정확히 모를 경우 와일드카드와 함께 사용하여 검색
WHERE 칼럼명 LIKE 패턴
< 와일드카드 >
% 	문자가 없거나, 하나 이상의 문자가 어떤 값이 오든 상관없다
_ 	하나의 문자가 어떤 값이 오든 상관 없다.
ex> K로 시작하는 사원
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE 'K%';
ex> 이름 중에 K를 포함하는 사원
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '%K%';
ex> 이름이 K로 끝나는 사원
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '%K';
ex> 이름의 두번째 글자가 A인 사원
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '_A%';

조건식		예						설명
LIKE _A		AA, BA, CA			자료가 두글자이되 이중 두번째 글자가 'A'인 자료
LIKE _A%		AAA, BAA, CA213S	자료의 두번째 글자가 'A'이거 그 뒤는 무엇이든 상관없는 자료
LIKE A__		AAA, BAA, ABF		자료의 첫번째 글자가 'A'이고 세 글자인 자료
LIKE _a__		AaVC, Ba12			자료의 두번째 글자가 'a'이고 네 글자인 자료

ex> 이름에 A를 포함하지 않은 사원의 사번, 이름을 출력하라
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME NOT LIKE '%A%';

10. NULL을 위한 연산자
오라클에서는 칼럼에 NULL을 저장하는 것을 허용
NULL은 연산, 할당, 비교가 불가능
ex> 커미션을 받지 않는 사원에 대한 검색
SELECT ENAME, COMM, JOB
FROM EMP
WHERE COMM=NULL;									-> 검색이 되지 않는다.
SELECT ENAME, COMM, JOB
FROM EMP
WHERE COMM IS NULL;			

# NULL값을 비교하고 싶을 때는 IS NULL, IS NOT NULL 사용
WHERE 칼럼명 IS NULL		-> 칼럼이 NULL을 만족할 때 검색
WHERE 칼럼명 IS NOT NULL	-> 칼럼이 NULL이 아닐 경우 검색
ex> 커미션을 받지 않는 사원에 대한 검색
SELECT ENAME, COMM, JOB
FROM EMP
WHERE COMM IS NULL;			
ex> 커미션을 받는 사원에 대한 검색
SELECT ENAME, COMM, JOB
FROM EMP
WHERE COMM IS NOT NULL;	
ex> 자신의 직속상관이 없는 사원의 이름과 직급과 직속상관의 사번을 출력하라.
SELECT ENAME, JOB, MGR
FROM EMP
WHERE MGR IS NULL;

11. 정렬을 위한 ORDER BY 절
ORDER BY절은 로우(행)를 정렬하는 데 사용
쿼리문 맨 뒤에 기술
정렬의 기준이 되는 칼럼 이름 또는 SELECT절에서 명시된 별칭 사용 가능
ORDER BY 칼럼명(별칭) [ASC, DESC]
ORDER BY 칼럼명 ASC 칼럼명2 ASC
-> 칼럼명1에 대해 오름차순으로 정렬후
-> 칼럼명1이 같은 항목에 대해서 칼럼명2에 대해 오름차순 정렬

ASC : 오름차순
- 숫자 : 작은 값부터 정렬
- 문자 : 사전 순서로 정렬
- 날짜 : 빠른 날짜 순서로 정렬
- NULL : 가장 마지막에 나온다.
DESC : 내림차순
- 숫자 : 높은 값부터 정렬
- 문자 : 사전 반대 순서로 정렬
- 날짜 : 늦은 날짜 순서로 정렬
- NULL : 가장 먼저 나온다.
영문자의 경우 소문자를 가장 큰 값으로, NULL값이 모든 값 중 가장 작은 값으로 인식
NULL <<< 대문자 <<< 소문자

ex> 사번을 기준으로 오름차순으로 정렬
SELECT EMPNO, ENAME
FROM EMP
ORDER BY EMPNO ASC;							-> ASC 생략 가능 기본값 오름차순
ex> 사원번호를 기준으로 내림차순으로 정렬
SELECT EMPNO, ENAME
FROM EMP
ORDER BY EMPNO DESC;
ex> 사원의 사번, 이름, 급여를 급여가 높은 순으로 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
ORDER BY SAL DESC;
ex> 입사일이 가장 최근인 사원 순으로 사번, 이름, 입사일을 출력
SELECT EMPNO, ENAME, HIREDATE
FROM EMP
ORDER BY HIREDATE DESC;