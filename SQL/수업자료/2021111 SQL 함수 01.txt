<< SQL 함수 >>
한 행으로 결과를 출력하기 위한 테이블 DUAL 테이블을 이용
오라클 프롬프트에 24*60*60을 입력하면 오류가 발생, SQL문이 아니기 때문
따라서 출력하기 위해서 테이블을 이용
ex>
SELECT 24*60*60 FROM DEPT;							-> 86400 이 네개의 로우로 나타남

SELECT 24*60*60 FROM DUAL;							-> 86400 이 한개의 로우로 나타남
-> DUAL 테이블은 산술 연산이나 가상 칼럼 등의 값을 한번만 출력하고 싶을 때 많이 사용
    DUMMY라는 한개의 칼럼으로 구성

DESC DUAL;
-> DUMMY		VARCHAR2(1)
-> 한 개의 문자만을 저장할 수 있는 단 하나만의 로우를 저장

SELECT * FROM DUAL;

<< 단일 행 함수와 그룹함수 >>
SQL 함수는 단일행 함수와 그룹함수로 분류할 수 있다.
단일행 함수 : 모든 행에 대해 각각 결과 값을 구함
ex> ROUND(SAL, -3)
그룹함수 : 모든 행에 대해 결과 값이 1개의 행으로 나옴
ex> SUM(SAL)

# 단일행 함수
문자 함수				문자열을 다른 형태로 변환
숫자 함수				숫자 값을 다른 형태로 변환
날짜 함수				날짜 값을 다른 형태로 변환
변환 함수				문자, 날짜, 숫자 값을 서로 다른 타입으로 변환
일반 함수				기타 함수
# 그룹 함수
SUM						그룹의 누적 합계 반환
AVG						그룹의 평균 반환
COUNT					그룹의 총 개수 반환
MAX						그룹의 최댓값을 반환
MIN						그룹의 최솟값을 반환
STDDEV					그룹의 표준편차를 반환
VARIANCE				그룹의 분산을 반환

<< 문자 함수 >>
1. LOWER 함수
입력한 문자 값을 소문자로 변환
ex> 'Database'를 소문자로 변환
SELECT 'Database', LOWER('Database')
FROM DUAL;
ex> 사원 테이블에서 부서번호가 10번인 사원명을 모두 소문자로 변환
SELECT ENAME, LOWER(ENAME)
FROM EMP
WHERE DEPTNO=10;

2. UPPER 함수
입력한 문자 값을 대문자로 변환
ex> 'Database'를 대문자로 변환
SELECT 'Database', UPPER('Database')
FROM DUAL;
ex> 직급이 'manager'인 사원을 검색
SELECT EMPNO, ENAME
FROM EMP
WHERE JOB = UPPER('manager');
SELECT EMPNO, ENAME
FROM EMP
WHERE LOWER(JOB) = 'manager';

3. INITCAP 함수
첫 글자만 대문자로 나머지는 소문자로 변환
ex> 'DATA BASE PROGRAM'의 첫 문자를 대문자로 나머지를 소문자로 변환
SELECT INITCAP('DATA BASE PROGRAM')
FROM DUAL;
ex> 사원 테이블의 10번 부서 소속의 사원 이름의 첫 글자만 대문자로 변환해서 검색
SELECT ENAME, INITCAP(ENAME)
FROM EMP
WHERE DEPTNO=10;
ex> 'Smith'란 이름을 갖는 사원의 사번과 이름과 급여와 커미션을 출력
SELECT EMPNO, ENAME, SAL, COMM
FROM EMP
WHERE INITCAP(ENAME)='Smith';

4. CONCAT 함수
두 문자를 연결하는데 사용
ex> 'Data' 와 'Base' 문자를 연결하여 출력
SELECT CONCAT('Data', 'Base')
FROM DUAL;

5. LENGTH / LENGTHB 함수
문자 상수나, 칼럼에 저장된 데이터 값이 몇 개의 문자로 구성되어있는지 길이를 구한다.
# B가 붙으면 바이트 수를 구한다. 영문 1바이트 한글 3바이트
ex> 'DataBase'와 '데이터베이스'의 길이를 구한다
SELECT LENGTH('DataBase'), LENGTH('데이터베이스')
FROM DUAL;
ex> 'DataBase'와 '데이터베이스'의 바이트수를 구한다
SELECT LENGTHB('DataBase'), LENGTHB('데이터베이스')
FROM DUAL;
ex> 10번 부서 소속 사원들의 이름의 길이를 구한다.
SELECT DEPTNO, EMPNO, ENAME, LENGTH(ENAME)
FROM EMP
WHERE DEPTNO=10;
ex> 직원 중 이름이 4글자인 직원의 이름을 소문자로 출력
SELECT EMPNO, LOWER(ENAME)
FROM EMP
WHERE LENGTH(ENAME)=4;
ex> 이름이 6글자 이상인 사원의 사번과 이름과 급여를 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE LENGTH(ENAME) >= 6;

6. SUBSTR / SUBSTRB 함수
문자열의 일부만 출력할 때 사용
SUBSTR(대상, 시작위치, 추출할 개수)
ex> 'DataBase'에서 첫번째 순서부터 문자 3개를 추출
SELECT SUBSTR('DataBase', 1, 3)
FROM DUAL;
# 시작위치의 인자 값이 음수이면 뒤에서부터 계산한다 
-> 맨 마지막이 -1, 그 앞부터 -2, -3, -4, ...
ex> 'DataBase'의 뒤쪽 4번째부터 문자 3개를 추출
SELECT SUBSTR('DataBase', -4, 3)
FROM DUAL;
ex> 20번 부서 사원들 중의 입사 년도 알아내기
SELECT EMPNO, ENAME, SUBSTR(HIREDATE, 1, 2)
FROM EMP
WHERE DEPTNO=20;
ex> 20번 부서 사원들 중 입사 년도가 81년도인 사원을 검색
SELECT EMPNO, ENAME, SUBSTR(HIREDATE, 1, 2)
FROM EMP
WHERE DEPTNO=20 AND SUBSTR(HIREDATE, 1, 2)='81';
ex> 이름이 K로 끝나는 직원을 검색
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '%K';
SELECT EMPNO, ENAME
FROM EMP
WHERE SUBSTR(ENAME, -1, 1)='K';

# B가 붙으면 바이트 수를 기준으로 문자열 일부만 추출
ex> '데이터베이스'에서 4바이트 수부터 6바이트만큼의 문자를 추출
SELECT SUBSTRB('데이터베이스', 4, 6)
FROM DUAL;

7. INSTR / INSTRB 함수
특정 문자의 위치를 구한다.
INSTR(대상, 찾을 글자, 시작위치, 몇번째 발견)
# 시작위치와 몇번째 발견 인자를 생략할 경우 1번째 위치에서 처음 발견한 문자의 위치를 리턴
ex> 'DataBase'에서 첫번째 'a'의 위치를 구한다
SELECT INSTR('DataBase', 'a')
FROM DUAL;
ex> 'DataBase'에서 첫번째 'a'의 위치를 3번째 문자부터 찾는다.
SELECT INSTR('DataBase', 'a', 3, 1)
FROM DUAL;
ex> 'DataBase'에서 두번째 'a'의 위치를 3번째 문자부터 찾는다.
SELECT INSTR('DataBase', 'a', 3, 2)
FROM DUAL;
ex> 'DataBase'에서 첫번째 'B'의 위치를 찾는다.
SELECT INSTR('DataBase', 'B')
FROM DUAL;
ex> 30번 부서 소속 사원 이름에 E자가 어디에 위치하는지 찾는다
SELECT EMPNO, ENAME, INSTR(ENAME, 'E', 1, 1)
FROM EMP
WHERE DEPTNO=30;

# B가 붙으면 바이트 수를 기준으로 문자의 위치를 찾는다.
ex> '데이터베이스'에서 '이'문자를 4바이트 위치부터 검색
SELECT INSTRB('데이터베이스', '이', 4, 1)
FROM DUAL;

ex> 이름의 세번째 자리가 R로 끝나는 직원을 검색
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '__R%';
SELECT EMPNO, ENAME
FROM EMP
WHERE INSTR(ENAME, 'R')=3;
ex> 이름의 두번쨰 자리에 A가 있는 사원의 사번, 이름, 직급을 출력
SELECT EMPNO, ENAME, JOB
FROM EMP
WHERE INSTR(ENAME, 'A')=2;

8. LPAD / RPAD 함수
문자열의 왼쪽이나 오른쪽을 특정 기호로 채우고 싶을 때 사용
LPAD(LEFT PADDING) : 문자열을 오른쪽 끝으로 보내고 남은 자리를 특정 기호로 채운다
RPAD(RIGHT PADDING) : 문자열을 왼쪽 끝으로 보내고 남은 자리를 특정 기호로 채운다
LPAD|RPAD(넣을 문자열, 결과 문자열의 길이, 채울문자);
ex> 'DataBase'를 20개 문자열의 맨 오른쪽으로 보내고 나머지를 '$'로 채움
SELECT LPAD('DataBase', 20, '$')
FROM DUAL;
ex> 'DataBase'를 20개 문자열의 맨 왼쪽으로 보내고 나머지를 '$'로 채움
SELECT RPAD('DataBase', 20, '$')
FROM DUAL;

9. TRIM 함수
특정 문자를 잘라낼 때 사용
특정 문자가 앞부분이거나 뒷부분일 때 잘라내고 남은 문자열을 반환
TRIM([LEADING, TRAILING, BOTH] [trim_character] [FROM] trim_source)
-> LEADING은 왼쪽 공백제거, TRAILING은 오른쪽 공백 제거, BOTH는 둘다 제거
ex> 문자열에서 'a' 앞뒤를 잘라낸다
SELECT TRIM('a' FROM 'aaaaDataBase programmingaaaa')
FROM DUAL;
ex> 이름이 SMITH인 사원의 이름과 'S'를 잘라낸 이름 'H'를 잘라낸 이름을 출력
SELECT ENAME, TRIM('S' FROM ENAME), TRIM('H' FROM ENAME)
FROM EMP
WHERE ENAME='SMITH';
ex> LT = ' ABCD '에서 왼쪽 공백을 제거 
	 RT = ' ABCD '에서 오른쪽 공백 제거
	 BOTH1 = ' ABCD '에서 양쪽 공백 제거 TRIM(BOTH 문자열) 사용하여
	 BOTH2 = ' ABCD '에서 양쪽 공백 제거
	 각각의 문자열과 결과값의 길이를 출력
SELECT 	TRIM(LEADING FROM ' ABCD ') AS LT,
			LENGTH(TRIM(LEADING FROM ' ABCD ')) AS LT_LEN,
			TRIM(TRAILING FROM ' ABCD ') AS RT,
			LENGTH(TRIM(TRAILING FROM ' ABCD ')) AS RT_LEN,
			TRIM(BOTH FROM ' ABCD ') AS BOTH1,
			LENGTH(TRIM(BOTH FROM ' ABCD ')) AS BOTH1_LEN,
			TRIM(' ABCD ') AS BOTH2,
			LENGTH(TRIM(' ABCD ')) AS BOTH2_LEN
FROM DUAL;

10. REPLACE 함수
문자열에서 특정 문자를 변경할 때 사용